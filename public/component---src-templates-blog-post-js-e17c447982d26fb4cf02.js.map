{"version":3,"sources":["webpack:///./src/components/blog/layout.js","webpack:///./src/components/blog/seo.js","webpack:///./src/components/blog/bio.js","webpack:///./src/templates/blog-post.js"],"names":["Layout","render","header","this","props","location","children","pathname","to","style","minHeight","background","theme","blogColor","marginLeft","marginRight","maxWidth","rhythm","padding","Date","getFullYear","href","React","Component","SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Bio","data","display","marginBottom","fixed","avatar","childImageSharp","alt","minWidth","borderRadius","imgStyle","BlogPostTemplate","post","markdownRemark","siteTitle","pageContext","previous","next","frontmatter","excerpt","marginTop","scale","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","fields","slug","rel"],"mappings":"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","file":"component---src-templates-blog-post-js-e17c447982d26fb4cf02.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { Button } from 'antd';\n\nimport { rhythm, scale } from \"../../utils/typography\"\nimport { title, theme } from '../../utils/constants';\nimport { Logo } from '../../components/landing/header';\n\nconst BLOG_LAYOUT_WIDTH = 24;\n\nclass Layout extends React.Component {\n  render() {\n    const { location, children } = this.props\n    const rootPath = `${__PATH_PREFIX__}/`\n    let header\n\n    if (location.pathname === rootPath) {\n      header = (\n          <Link\n            to={`/`}\n          >\n            <Logo/>\n          </Link>\n      )\n    } else {\n      header = (\n          <Link\n            to={`/`}\n          >\n            <Logo/>\n          </Link>\n      )\n    }\n    return (\n      <div style={{minHeight: '100vh', background: theme.blogColor}}>\n      <div\n        style={{\n          marginLeft: `auto`,\n          marginRight: `auto`,\n          maxWidth: rhythm(BLOG_LAYOUT_WIDTH),\n          padding: `0 ${rhythm(0.5)}`,\n        }}\n      >\n        <header>{header}</header>\n        <main>{children}</main>\n        <footer>\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nimport { rhythm } from \"../../utils/typography\"\nimport { author } from '../../utils/constants';\n\nconst BOTTOM_MARGIN = 1;\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(BOTTOM_MARGIN),\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p>\n        Written by <strong>{author}</strong> who lives and works in Seattle building useful things.\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/blog/bio\"\nimport Layout from \"../components/blog/layout\"\nimport SEO from \"../components/blog/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt}\n        />\n        <article>\n          <header>\n            <h1\n              style={{\n                marginTop: rhythm(1),\n                marginBottom: 0,\n              }}\n            >\n              {post.frontmatter.title}\n            </h1>\n            <p\n              style={{\n                ...scale(-1 / 5),\n                display: `block`,\n                marginBottom: rhythm(1),\n              }}\n            >\n              {post.frontmatter.date}\n            </p>\n            <Bio />\n          </header>\n          <section dangerouslySetInnerHTML={{ __html: post.html }} />\n          <hr\n            style={{\n              marginBottom: rhythm(1),\n            }}\n          />\n         \n        </article>\n\n        <nav>\n          <ul\n            style={{\n              display: `flex`,\n              flexWrap: `wrap`,\n              justifyContent: `space-between`,\n              listStyle: `none`,\n              padding: 0,\n            }}\n          >\n            <li>\n              {previous && (\n                <Link to={previous.fields.slug} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={next.fields.slug} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}