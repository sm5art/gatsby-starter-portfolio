{"version":3,"sources":["webpack:///./src/utils/blog.js","webpack:///./src/components/blog/bio.js","webpack:///./src/pages/blog.js","webpack:///./src/utils/constants.js"],"names":["constants","require","exports","filterPosts","posts","filter","post","node","fields","slug","includes","blogBasePath","Bio","data","site","siteMetadata","author","social","style","display","marginBottom","rhythm","fixed","avatar","childImageSharp","alt","marginRight","minWidth","borderRadius","imgStyle","href","twitter","BlogIndex","render","this","props","siteTitle","title","allMarkdownRemark","edges","location","map","frontmatter","key","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt","React","Component","pageQuery","module","jumbotron","lines","bottomMessagePrefix","topMessage"],"mappings":"kGAAA,IAAMA,EAAYC,EAAQ,QAE1BC,EAAQC,YAAc,SAACC,GACnB,OAAOA,EAAMC,QAAO,SAAAC,GAAI,OAAEA,EAAKC,KAAKC,OAAOC,KAAKC,SAASV,EAAUW,mB,miDCgExDC,IAtDH,WACV,IAAMC,EAAI,OADM,EAqBWA,EAAKC,KAAKC,aAA7BC,EArBQ,EAqBRA,OAAQC,EArBA,EAqBAA,OAChB,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,OAGvB,kBAAC,IAAD,CACEC,MAAOT,EAAKU,OAAOC,gBAAgBF,MACnCG,IAAKT,EACLE,MAAO,CACLQ,YAAaL,YAAO,IACpBD,aAAc,EACdO,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAGjB,yCACa,gCAASZ,GADtB,oEAIE,uBAAGc,KAAI,uBAAyBb,EAAOc,SAAvC,wC,wLClDFC,E,gLACJC,OAAA,WAAU,IACApB,EAASqB,KAAKC,MAAdtB,KACFuB,EAAYvB,EAAKC,KAAKC,aAAasB,MACnCjC,EAAQD,sBAAYU,EAAKyB,kBAAkBC,OACjD,OACE,kBAAC,IAAD,CAAQC,SAAUN,KAAKC,MAAMK,SAAUH,MAAOD,GAC5C,kBAAC,IAAD,CAAKC,MAAM,cACVjC,EAAMqC,KAAI,YAAe,IAAZlC,EAAW,EAAXA,KACN8B,EAAQ9B,EAAKmC,YAAYL,OAAS9B,EAAKC,OAAOC,KACpD,OACE,6BAASkC,IAAKpC,EAAKC,OAAOC,MACxB,gCACE,wBACES,MAAO,CACLE,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMH,MAAO,CAAE0B,UAAU,QAAWC,GAAItC,EAAKC,OAAOC,MACjD4B,IAGL,+BAAQ9B,EAAKmC,YAAYI,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQzC,EAAKmC,YAAYO,aAAe1C,EAAK2C,gBAOzD,kBAAC,IAAD,Q,GAlCgBC,IAAMC,WAwCfpB,YAER,IAAMqB,EAAS,c,mBCnDtBC,EAAOpD,QAAU,CACbS,aAAc,QACd4C,UAAW,CACPC,MAAO,CAAC,YAAa,aAAc,YAAa,wBAChDC,oBAAqB,WACrBC,WAAY","file":"component---src-pages-blog-js-3dfa8a40c38cdb3b5090.js","sourcesContent":["const constants = require('./constants');\n\nexports.filterPosts = (posts) => {\n    return posts.filter(post=>post.node.fields.slug.includes(constants.blogBasePath));\n}","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nimport { rhythm } from \"../../utils/typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p>\n        Written by <strong>{author}</strong> who lives and works in San\n        Francisco building useful things.\n        {` `}\n        <a href={`https://twitter.com/${social.twitter}`}>\n          You should follow him on Twitter\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/blog/bio\"\nimport Layout from \"../components/blog/layout\"\nimport SEO from \"../components/blog/seo\"\nimport { rhythm } from \"../utils/typography\";\nimport { filterPosts } from \"../utils/blog\";\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = filterPosts(data.allMarkdownRemark.edges);\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <article key={node.fields.slug}>\n              <header>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                  }}\n                >\n                  <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n              </header>\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.frontmatter.description || node.excerpt,\n                  }}\n                />\n              </section>\n            </article>\n          )\n        })}\n        <Bio />\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n","module.exports = {\n    blogBasePath: 'blogs',\n    jumbotron: {\n        lines: [\"software.\", 'front end.', 'back end.', 'full stack software.'],\n        bottomMessagePrefix: \"I build \",\n        topMessage: \"Hi, i'm Artur.\"\n    },\n    \n};"],"sourceRoot":""}